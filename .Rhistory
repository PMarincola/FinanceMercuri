# this is a comment
this is NOT a comment
x <- 1   # assign 1 to variable x
# or
x = 1
sum(1,2,3,4,5)  # summing 1+2+3+4+5
#show the examples of the command "image"
example(persp)
demo(persp)
# install the "xts" package
install.packages('xts')
demo(graphics)
DOCUMENTATION IN R
#Help
R provides extensive documentation. Enter ?function_name to access the
documentation of a function.
demo(persp)
namespace or loading the package.
demo(image)
#################
DOCUMENTATION IN R
#Help
R provides extensive documentation. Enter ?function_name to access the
?sum
x <- 10.5 # assign a decimal value
str(x)
is.numeric(x)
is.integer(x)
xcode-select --install
str(lista)
lista<-list(A=matrix(1:9,nrow=3),X=rep(0,3),D=c('buono','cattivo')) #a list with a label for the objects
lista
lista$N<-rep(5,7) #add a new object N to the list lista
str(lista)
## -----------------------------------------------------------------------------------------
n_pop <- 10000
m50 <- 50
K <- 200
media_teorica <- 100
sd_teorica <- 15
popolazione <- rnorm(n_pop, media_teorica, sd_teorica)
mean(popolazione)
sd(popolazione)
hist(popolazione)
qqnorm(popolazione)
## -----------------------------------------------------------------------------------------
campioni50 <- matrix(nrow = K, ncol = m50)
for (k in 1:K) {
campioni50[k, ] <- sample(popolazione, m50)
}
medie_campioni50 <- apply(campioni50, 1, mean)
mean(medie_campioni50)
sd(medie_campioni50)
source("functionExam.R")
# Underlying
S = 30
#Strike
K = 40
#today
t0 = 0
#Maturity
T = 1
i = 0.1
u = 1.5
d = 1.2
result <- EU_put(S, K, t0, T, i, u, d)
# Price of the financial derivate at t0
sprintf("Price: %f",result$price_t0)
# Replicating portfolio
sprintf("y: %f",result$y)
sprintf("q: %f",result$q)
setwd("~/Desktop/Master Data Science/II_Economical and Financial Data Science/FinanceMercuri")
source("functionExam.R")
# Underlying
S = 30
#Strike
K = 40
#today
t0 = 0
#Maturity
T = 1
i = 0.1
u = 1.5
d = 1.2
result <- EU_put(S, K, t0, T, i, u, d)
# Price of the financial derivate at t0
sprintf("Price: %f",result$price_t0)
# Replicating portfolio
sprintf("y: %f",result$y)
sprintf("q: %f",result$q)
EuropeanPut <- function(S_0, K, t_0=0, T=1, i, u, d){
r = (1+i)^(T-t_0)
qd = (r-d)/(u-d)
qu = 1-qd
payoffu = pmax((K-S_0)*u,0)
payoffd = pmax((K-S_0)*d,0)
p_t0 = (1/r)*(qu*payoffu + qd*payoffd)
y_star = (1/S_0)*((payoffu-payoffd)/(u-d))
return(list("price" = p_t0, "Q" = c(qu, qd), "y_star" = y_star))
}
# Sottostante
S_0 = 100
# Strike price
K = 110
t_0 = 0
T = 1
i = 0.05
u = 1.1
d = 0.9
result <- EuropeanPut(S_0, K, t_0, T, i, u, d)
# Prezzo della put al tempo t_0
putPrice = result$price
# Quantità di titolo rischioso nel portafoglio di replica
result$y_star
result$Q
# Sottostante
S<-seq(0.5,2.5,length.out = 101)
# Numero di posizioni Long in una Call con Strike Price k1
J <-1
# Numero di posizioni Long in una Call con Strike Price k2
H <-1
# Strike price 1
k1 = 1
# Strike price 2
k2 = 2
w = J/(J+H)
# Combinazione Lineare Convessa di k1 e k2
k12 = w*k1 + (1-w)*k2
# Payoff
payoff = J*pmax(S-k1,0) - (J+H)*pmax(S-k12,0) + H*pmax(S-k2,0)
# Plot
plot(S, payoff, type="l")
#Esercizio 2.1
# Funzione che valuta un'opzione europea di tipo put in un albero binomiale uniperiodale
EuropeanPut <- function(S_0, K, t_0=0, T=1, i, u, d){
r = (1+i)^(T-t_0)
qd = (r-d)/(u-d)
qu = 1-qd
payoffu = pmax((K-S_0)*u,0)
payoffd = pmax((K-S_0)*d,0)
p_t0 = (1/r)*(qu*payoffu + qd*payoffd)
y_star = (1/S_0)*((payoffu-payoffd)/(u-d))
return(list("price" = p_t0, "Q" = c(qu, qd), "y_star" = y_star))
}
# Sottostante
S_0 = 100
# Strike price
K = 110
t_0 = 0
T = 1
i = 0.05
u = 1.1
d = 0.9
result <- EuropeanPut(S_0, K, t_0, T, i, u, d)
# Prezzo della put al tempo t_0
putPrice = result$price
# Quantità di titolo rischioso nel portafoglio di replica
result$y_star
result$Q
# Funzione che valuta un'opzione europea di tipo put in un albero binomiale uniperiodale
EuropeanPut <- function(S_0, K, t_0=0, T=1, i, u, d){
r = (1+i)^(T-t_0)
qd = (r-d)/(u-d)
qu = 1-qd
payoffu = pmax((K-S_0)*u,0)
payoffd = pmax((K-S_0)*d,0)
p_t0 = (1/r)*(qu*payoffu + qd*payoffd)
y_star = (1/S_0)*((payoffu-payoffd)/(u-d))
return(list("price" = p_t0, "Q" = c(qu, qd), "y_star" = y_star))
}
# Sottostante
S_0 = 100
# Strike price
K = 110
t_0 = 0
T = 1
i = 0.05
u = 1.1
d = 0.9
result <- EuropeanPut(S_0, K, t_0, T, i, u, d)
# Prezzo della put al tempo t_0
putPrice = result$price
# Quantità di titolo rischioso nel portafoglio di replica
result$y_star
result$Q
source("functionExam.R")
# Underlying
S = 100
#Strike
K = 110
#today
t0 = 0
#Maturity
T = 1
i = 0.05
u = 1.1
d = 0.9
result <- EU_put(S, K, t0, T, i, u, d)
# Price of the financial derivate at t0
sprintf("Price: %f",result$price_t0)
# Replicating portfolio
sprintf("y: %f",result$y)
sprintf("q: %f",result$q)
source("functionExam.R")
# Underlying
S = 100
#Strike
K = 110
#today
t0 = 0
#Maturity
T = 1
i = 0.05
u = 1.1
d = 0.9
result <- EU_put(S, K, t0, T, i, u, d)
# Price of the financial derivate at t0
sprintf("Price: %f",result$price_t0)
# Replicating portfolio
sprintf("y: %f",result$y)
sprintf("q: %f",result$q)
source("functionExam.R")
# Underlying
S = 100
#Strike
K = 110
#today
t0 = 0
#Maturity
T = 1
i = 0.05
u = 1.1
d = 0.9
result <- EU_put(S, K, t0, T, i, u, d)
# Price of the financial derivate at t0
sprintf("Price: %f",result$price_t0)
# Replicating portfolio
sprintf("y: %f",result$y)
sprintf("q: %f",result$q)
source("functionExam.R")
# Underlying
S = 50
#Strike
K = 70
#today
t0 = 0
#Maturity
T = 1
i = 0.1
u = 1.5
d = 0.5
result <- EU_put(S, K, t0, T, i, u, d)
# Price of the financial derivate at t0
sprintf("Price: %f",result$price_t0)
# Replicating portfolio
sprintf("y: %f",result$y)
sprintf("q: %f",result$q)
source("functionExam.R")
# Prezzo al tempo t_0
callPrice_t0 <- priceParity(S, K, t0, T, i, u, d)
